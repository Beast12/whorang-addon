---
name: Build and Publish Home Assistant Add-on

on:
  push:
    branches:
      - main
      - development
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: beast12/whorang-addon

jobs:
  build-multi-arch:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push multi-arch Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./whorang
          file: ./whorang/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_FROM=ghcr.io/home-assistant/amd64-base:3.20
            BUILD_VERSION=${{ steps.meta.outputs.version || '2.0.3' }}
            BUILD_ARCH=amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max,ignore-error=true

      - name: Ensure image visibility
        run: |
          # Make the package public
          curl -X PATCH \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/user/packages/container/whorang-addon/visibility \
            -d '{"visibility":"public"}'
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

  test-image:
    runs-on: ubuntu-latest
    needs: build-multi-arch
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Test Home Assistant Add-on
        run: |
          echo "üß™ Testing Home Assistant Add-on..."
          
          # Pull the latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Test 1: Standalone mode (non-HA environment)
          echo "üîß Testing standalone mode..."
          docker run -d --name whorang-test-standalone \
            -p 8080:80 \
            -e WHORANG_ADDON_MODE=false \
            -e AI_PROVIDER=local \
            -e LOG_LEVEL=info \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Wait for container to start and services to be ready
          echo "‚è≥ Waiting for services to start..."
          sleep 30
          
          # Test health endpoint via nginx (port 80)
          echo "üîç Testing health endpoint..."
          if docker exec whorang-test-standalone curl -f http://localhost:80/api/health; then
            echo "‚úÖ Health check passed (standalone mode)"
          else
            echo "‚ùå Health check failed (standalone mode)"
            echo "üìã Container logs:"
            docker logs whorang-test-standalone
            exit 1
          fi
          
          # Test database connection
          echo "üîç Testing database connection..."
          if docker exec whorang-test-standalone curl -f http://localhost:80/api/stats; then
            echo "‚úÖ Database connection working"
          else
            echo "‚ùå Database connection failed"
            echo "üìã Container logs:"
            docker logs whorang-test-standalone
            exit 1
          fi
          
          # Test web interface with retry logic and content verification
          echo "üîç Testing web interface..."
          
          # Function to test web interface with retries
          test_web_interface() {
            local max_attempts=5
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "  Attempt $attempt/$max_attempts..."
              
              # Test HTTP status and content in one go
              if docker exec whorang-test-standalone curl -f -s http://localhost:80/ | grep -q "WhoRang"; then
                echo "‚úÖ Web interface working - contains WhoRang text!"
                return 0
              fi
              
              echo "  ‚è≥ Waiting 10 seconds before retry..."
              sleep 10
              attempt=$((attempt + 1))
            done
            
            return 1
          }
          
          # Wait longer for full startup (60 seconds total)
          echo "‚è≥ Additional wait for full service startup..."
          sleep 10
          
          if test_web_interface; then
            echo "‚úÖ Web interface test passed"
          else
            echo "‚ùå Web interface test failed after $max_attempts attempts"
            echo "üìã Response details:"
            docker exec whorang-test-standalone curl -v http://localhost:80/ || true
            echo "üìã Container logs:"
            docker logs whorang-test-standalone
            exit 1
          fi
          
          # Cleanup standalone test
          docker stop whorang-test-standalone
          docker rm whorang-test-standalone
          
          # Test 2: Home Assistant add-on mode simulation
          echo "üè† Testing Home Assistant add-on mode simulation..."
          docker run -d --name whorang-test-addon \
            -p 8081:80 \
            -e WHORANG_ADDON_MODE=true \
            -e AI_PROVIDER=local \
            -e LOG_LEVEL=info \
            -v /tmp/whorang-test-data:/data \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Wait for container to start
          sleep 15
          
          # Test bashio integration and HA mode detection
          if docker logs whorang-test-addon | grep -q "Running as standalone Docker container"; then
            echo "‚úÖ HA mode detection working (expected: standalone when supervisor not available)"
          else
            echo "‚ùå HA mode detection failed"
            docker logs whorang-test-addon
            exit 1
          fi
          
          # Test persistent data directory
          if docker exec whorang-test-addon test -d /data/uploads; then
            echo "‚úÖ Persistent data directory created"
          else
            echo "‚ùå Persistent data directory missing"
            docker logs whorang-test-addon
            exit 1
          fi
          
          # Test configuration loading
          if docker logs whorang-test-addon | grep -q "Configuration Summary"; then
            echo "‚úÖ Configuration loading working"
          else
            echo "‚ùå Configuration loading failed"
            docker logs whorang-test-addon
            exit 1
          fi
          
          # Cleanup addon test
          docker stop whorang-test-addon
          docker rm whorang-test-addon
          
          echo "‚úÖ All Home Assistant add-on tests passed!"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-multi-arch
    if: github.event_name != 'pull_request'

    permissions:
      contents: read
      security-events: write  # ‚úÖ Needed for uploading SARIF

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  create-release:
    runs-on: ubuntu-latest
    needs: [build-multi-arch, test-image, security-scan]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: WhoRang Home Assistant Add-on ${{ github.ref_name }}
          body: |
            ## WhoRang AI Doorbell Home Assistant Add-on ${{ github.ref_name }}
            
            ### üè† Home Assistant Add-on
            
            **Official Home Assistant Add-on Store Ready:**
            - ‚úÖ Full Home Assistant standards compliance
            - ‚úÖ Bashio integration for configuration and logging
            - ‚úÖ S6 supervisor service management
            - ‚úÖ Persistent data storage with `/data` volume
            - ‚úÖ Web UI integration with ingress support
            - ‚úÖ Multi-architecture support (amd64, arm64, armv7)
            
            ### üê≥ Container Images
            
            **Multi-Architecture Support:**
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
            
            **Supported Platforms:**
            - linux/amd64 (x86_64) - Intel/AMD 64-bit
            - linux/arm64 (ARM 64-bit) - Raspberry Pi 4, Apple Silicon
            - linux/arm/v7 (ARM 32-bit) - Raspberry Pi 3
            
            ### üöÄ Installation
            
            **Home Assistant Add-on (Recommended):**
            1. Add this repository to your Home Assistant add-on store
            2. Install the WhoRang AI Doorbell add-on
            3. Configure through the add-on UI
            4. Start the add-on
            
            **Standalone Docker:**
            ```bash
            # Docker run (standalone mode)
            docker run -d --name whorang-addon \
              -p 80:80 \
              -v ./whorang-data:/data \
              -e WHORANG_ADDON_MODE=false \
              -e AI_PROVIDER=local \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            
            # Docker Compose
            version: '3.8'
            services:
              whorang:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
                ports:
                  - "80:80"
                volumes:
                  - ./whorang-data:/data
                environment:
                  - WHORANG_ADDON_MODE=false
                  - AI_PROVIDER=local
                  - LOG_LEVEL=info
                restart: unless-stopped
            ```
            
            ### üìã What's New
            
            See [CHANGELOG.md](whorang/CHANGELOG.md) for detailed changes.
            
            ### üîí Security
            
            This release has been scanned for vulnerabilities using Trivy.
            
            ### üìö Documentation
            
            - [Add-on README](whorang/README.md)
            - [Installation Guide](docs/INSTALLATION.md)
            - [Configuration Options](docs/CONFIGURATION.md)
            - [Troubleshooting](docs/TROUBLESHOOTING.md)
            - [API Reference](docs/API_REFERENCE.md)
          draft: false
          prerelease: false
  house-keeping:
    runs-on: ubuntu-latest
    if: always()
    needs: security-scan
    permissions:
      packages: write
      contents: read
    steps:
      - name: Delete old image versions
        uses: actions/delete-package-versions@v5
        with:
          package-name: 'whorang-addon'
          package-type: 'container'
          min-versions-to-keep: 5
          token: ${{ secrets.GITHUB_TOKEN }}
