#!/usr/bin/env bash
# ==============================================================================
# WhoRang AI Doorbell Add-on
# s6-overlay container initialization script
# ==============================================================================

# This script runs once when the container starts, before any services.
# It is responsible for setting up the environment for all s6 services.

# Safely attempt to source bashio, but do not fail if it's unavailable.
# This ensures compatibility with both HA and standalone Docker environments.
BASHIO_IS_AVAILABLE="false"
if [ -f "/usr/lib/bashio/bashio.sh" ]; then
    # Redirect errors to /dev/null to prevent script failure if bashio's
    # own dependencies (like /const.sh) are missing.
    # shellcheck source=/usr/lib/bashio/bashio.sh
    source /usr/lib/bashio/bashio.sh 2>/dev/null
    # After attempting to source, verify that the bashio command is actually available.
    if command -v bashio >/dev/null 2>&1; then
        BASHIO_IS_AVAILABLE="true"
    fi
fi

# Function to log messages, using bashio if it was successfully sourced.
log_info() {
    if [ "${BASHIO_IS_AVAILABLE}" = "true" ] && bashio::supervisor.ping >/dev/null 2>&1; then
        bashio::log.info "$1"
    else
        echo "[Init] $1"
    fi
}

log_info "Starting WhoRang one-time initialization..."



# Create the s6 environment directory if it doesn't exist
mkdir -p /var/run/s6/container_environment

# Determine run mode (Home Assistant Add-on vs. Standalone)
WHORANG_ADDON_MODE="false"
if [ -f "/data/options.json" ]; then
    log_info "Home Assistant Add-on mode detected."
    WHORANG_ADDON_MODE="true"
else
    log_info "Standalone mode detected."
fi
printf "%s" "${WHORANG_ADDON_MODE}" > /var/run/s6/container_environment/WHORANG_ADDON_MODE

# Read configuration from Home Assistant options
if [ "${WHORANG_ADDON_MODE}" = "true" ]; then
    log_info "Loading configuration for Home Assistant add-on mode..."

    CONFIG_KEYS=(
        "ai_provider" "log_level" "database_path" "uploads_path" "max_upload_size" 
        "face_recognition_threshold" "ai_analysis_timeout" "websocket_enabled" 
        "cors_enabled" "public_url" "cors_origins"
    )

    for key in "${CONFIG_KEYS[@]}"; do
        value=""
        # First, try to get config from bashio if it's available
        if [ "${BASHIO_IS_AVAILABLE}" = "true" ]; then
            value=$(bashio::config "$key")
        fi

        # If bashio returns an empty string or the literal string "null", fall back to options.json
        if { [[ -z "$value" ]] || [[ "$value" == "null" ]]; } && [[ -f "/data/options.json" ]]; then
            log_info "Falling back to /data/options.json for '$key'"
            jq_value=$(jq -r ".${key}" /data/options.json)
            if [[ "$jq_value" != "null" ]]; then
                # Handle array for cors_origins, which needs special parsing
                if [[ "$key" == "cors_origins" ]]; then
                    value=$(jq -r '.cors_origins[]' /data/options.json | paste -sd ',' -)
                else
                    value="$jq_value"
                fi
            fi
        fi

        # Export the variable to the container's environment
        VAR_NAME=$(echo "$key" | tr '[:lower:]' '[:upper:]')
        export "${VAR_NAME}=${value}"
        printf "%s" "$value" > "/var/run/s6/container_environment/$VAR_NAME"
    done
else
    log_info "Loading configuration from environment variables (standalone mode)..."
    AI_PROVIDER=${AI_PROVIDER:-local}
    LOG_LEVEL=${LOG_LEVEL:-info}
    DATABASE_PATH=${DATABASE_PATH:-/data/whorang.db}
    UPLOADS_PATH=${UPLOADS_PATH:-/data/uploads}
    MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE:-10}
    FACE_RECOGNITION_THRESHOLD=${FACE_RECOGNITION_THRESHOLD:-0.8}
    AI_ANALYSIS_TIMEOUT=${AI_ANALYSIS_TIMEOUT:-30}
    WEBSOCKET_ENABLED=${WEBSOCKET_ENABLED:-true}
    CORS_ENABLED=${CORS_ENABLED:-true}
    CORS_ORIGINS=${CORS_ORIGINS:-*}
    PUBLIC_URL=${PUBLIC_URL:-}
fi

# Write all variables to the s6 environment directory for services to inherit
log_info "Exporting configuration for services..."
printf "%s" "${AI_PROVIDER}" > /var/run/s6/container_environment/AI_PROVIDER
printf "%s" "${LOG_LEVEL}" > /var/run/s6/container_environment/LOG_LEVEL
printf "%s" "${DATABASE_PATH}" > /var/run/s6/container_environment/DATABASE_PATH
printf "%s" "${UPLOADS_PATH}" > /var/run/s6/container_environment/UPLOADS_PATH
printf "%s" "${MAX_UPLOAD_SIZE}" > /var/run/s6/container_environment/MAX_UPLOAD_SIZE
printf "%s" "${FACE_RECOGNITION_THRESHOLD}" > /var/run/s6/container_environment/FACE_RECOGNITION_THRESHOLD
printf "%s" "${AI_ANALYSIS_TIMEOUT}" > /var/run/s6/container_environment/AI_ANALYSIS_TIMEOUT
printf "%s" "${WEBSOCKET_ENABLED}" > /var/run/s6/container_environment/WEBSOCKET_ENABLED
printf "%s" "${CORS_ENABLED}" > /var/run/s6/container_environment/CORS_ENABLED
printf "%s" "${PUBLIC_URL}" > /var/run/s6/container_environment/PUBLIC_URL
printf "%s" "${CORS_ORIGINS}" > /var/run/s6/container_environment/CORS_ORIGINS

# Set fixed Node.js environment variables
printf "%s" "production" > /var/run/s6/container_environment/NODE_ENV
printf "%s" "3001" > /var/run/s6/container_environment/PORT

# Standalone mode requires adjusting nginx config for external access
if [ "${WHORANG_ADDON_MODE}" = "false" ]; then
    log_info "Applying standalone network configuration for nginx..."
    if [ -f /etc/nginx/conf.d/default.conf ]; then
        sed -i '/allow 172\.30\.32\.2;/c\    allow all;' /etc/nginx/conf.d/default.conf
    fi
fi

log_info "WhoRang initialization complete."
