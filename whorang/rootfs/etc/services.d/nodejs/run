#!/usr/bin/with-contenv bash

# Source the environment variables set by cont-init scripts
# This is critical for ensuring variables like WHORANG_ADDON_MODE are available.
if [ -f /etc/s6-overlay/s6-rc.d/user/env ]; then
    . /etc/s6-overlay/s6-rc.d/user/env
fi

# Try to source bashio, but handle case where it's not available
BASHIO_AVAILABLE=false
if [ -f /usr/lib/bashio/bashio.sh ] && [ -f /etc/bashio.const ] 2>/dev/null; then
    # shellcheck source=/dev/null
    source /usr/lib/bashio/bashio.sh 2>/dev/null || true
    if command -v bashio::log.info >/dev/null 2>&1; then
        BASHIO_AVAILABLE=true
    fi
fi

# Function to log messages
log_info() {
    if [ "$BASHIO_AVAILABLE" = "true" ]; then
        bashio::log.info "$1"
    else
        echo "[INFO] $1"
    fi
}

# Set proper environment for Node.js and change to app directory
export NODE_ENV=production
export HOME=/app
export OPENSSL_CONF=/dev/null
cd /app || exit 1

log_info "Starting Node.js backend..."

# ==============================================================================
# Home Assistant Add-on: WhoRang - Node.js Service
# ==============================================================================

echo "Starting WhoRang backend..."

# Logic to handle HA Add-on mode vs. Standalone mode
if [ "${WHORANG_ADDON_MODE}" = "true" ]; then
    log_info "Running in Home Assistant add-on mode."
    # In HA mode, permissions are managed by the OS, so we run as the default user.
    # The init script has already set necessary permissions.
    exec s6-setuidgid whorun node server.js
else
    log_info "Running in standalone mode."
    # In standalone mode, we ensure the 'node' user owns the files and run the process as that user.
    chown -R node:node /app 2>/dev/null || true
    exec s6-setuidgid node node server.js
fi

