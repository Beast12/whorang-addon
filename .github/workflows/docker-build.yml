---
name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: beast12/whorang-backend

jobs:
  build-multi-arch:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push multi-arch Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./whorang
          file: ./whorang/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-image:
    runs-on: ubuntu-latest
    needs: build-multi-arch
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Test Docker image
        run: |
          echo "üß™ Testing Docker image..."
          
          # Pull the latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Run container in background
          docker run -d --name whorang-test \
            -p 3001:3001 \
            -e NODE_ENV=production \
            -e LOG_LEVEL=info \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          if curl -f http://localhost:3001/api/health; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed"
            docker logs whorang-test
            exit 1
          fi
          
          # Test API endpoints
          if curl -f http://localhost:3001/api/stats; then
            echo "‚úÖ Stats endpoint accessible"
          else
            echo "‚ùå Stats endpoint failed"
            docker logs whorang-test
            exit 1
          fi
          
          # Cleanup
          docker stop whorang-test
          docker rm whorang-test
          
          echo "‚úÖ All tests passed!"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-multi-arch
    if: github.event_name != 'pull_request'

    permissions:
      contents: read
      security-events: write  # ‚úÖ Needed for uploading SARIF

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  update-readme:
    runs-on: ubuntu-latest
    needs: [build-multi-arch, test-image]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with latest image info
        run: |
          # Get image digest
          IMAGE_DIGEST=$(docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest | jq -r '.digest')
          
          # Update README with build timestamp
          BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          # Create or update build info section in README
          if grep -q "<!-- BUILD_INFO -->" README.md; then
            sed -i "/<!-- BUILD_INFO -->/,/<!-- \/BUILD_INFO -->/c\\
          <!-- BUILD_INFO -->\\
          **Latest Build**: $BUILD_DATE\\
          **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`\\
          **Digest**: \`${IMAGE_DIGEST}\`\\
          **Platforms**: linux/amd64, linux/arm64, linux/arm/v7\\
          <!-- /BUILD_INFO -->" README.md
          else
            echo "" >> README.md
            echo "<!-- BUILD_INFO -->" >> README.md
            echo "**Latest Build**: $BUILD_DATE" >> README.md
            echo "**Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> README.md
            echo "**Digest**: \`${IMAGE_DIGEST}\`" >> README.md
            echo "**Platforms**: linux/amd64, linux/arm64, linux/arm/v7" >> README.md
            echo "<!-- /BUILD_INFO -->" >> README.md
          fi

      - name: Commit README updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update README with latest build info [skip ci]"
            git push
          fi

  create-release:
    runs-on: ubuntu-latest
    needs: [build-multi-arch, test-image, security-scan]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: WhoRang Backend ${{ github.ref_name }}
          body: |
            ## WhoRang AI Doorbell Backend ${{ github.ref_name }}
            
            ### üê≥ Docker Images
            
            **Multi-Architecture Support:**
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
            
            **Supported Platforms:**
            - linux/amd64 (x86_64)
            - linux/arm64 (ARM 64-bit)
            - linux/arm/v7 (ARM 32-bit)
            
            ### üöÄ Quick Start
            
            ```bash
            # Docker run
            docker run -d --name whorang-backend \
              -p 3001:3001 \
              -v ./data:/data \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            
            # Docker Compose
            version: '3.8'
            services:
              whorang:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
                ports:
                  - "3001:3001"
                volumes:
                  - ./whorang-data:/data
                environment:
                  - AI_PROVIDER=local
                  - LOG_LEVEL=info
                restart: unless-stopped
            ```
            
            ### üìã What's New
            
            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
            
            ### üîí Security
            
            This release has been scanned for vulnerabilities using Trivy.
            
            ### üìö Documentation
            
            - [Installation Guide](README.md#installation)
            - [Configuration Options](README.md#configuration-options)
            - [Troubleshooting](README.md#troubleshooting)
          draft: false
          prerelease: false
